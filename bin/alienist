#!/usr/bin/env ruby

require 'optparse'
require 'alienist/parser'
require 'alienist/reader'

debug = 0

# FIXME: Use lambda to stuff require into it so we don't need world loaded.
BACKENDS = {
  'memory' => lambda {
    require 'alienist/snapshot/memory_snapshot'

    Alienist::Snapshot::MemorySnapshot.new
  },
  'sequel' => lambda {
    require 'alienist/snapshot/sequel_snapshot'

    Alienist::Snapshot::SequelSnapshot.new
  },
}

backend = BACKENDS['memory']
console = false

opts = OptionParser.new do |opts|
  opts.banner = "Usage: alienist [options] dump_file"
  opts.on("-b", "--backend name", "Backend: #{BACKENDS.keys.join(', ')}") do |v|
    backend = BACKENDS[v]
    opts.usage "Valid backends: #{BACKENDS.keys.join(', ')}" unless backend
  end
  opts.on("-d", "--debug value", "turn on debugging") do |v|
    debug = v.to_i
  end
  opts.on("-c", "--console", "make irb console after parsing") do
    backend = BACKENDS['memory'] # FIXME: Once fleshed out more make any backend work.
    console = true
  end
end
opts.parse!(ARGV)

filename = ARGV.shift

abort "No filename provided" unless filename

File.open(filename, "rb") do |io|
  start_time = Time.now
  reader = Alienist::Reader.new io, debug
  dump = Alienist::Parser.new reader, backend.call, debug
  snapshot = dump.parse
  if console
    puts "Took #{Time.now - start_time}s to parser #{snapshot.instances.size} objects from #{snapshot.classes.size} classes."
    require 'alienist/console'

    IRB.start_session binding
  else  # Assume dumping for now
    require 'alienist/dumper/ruby_json_dumper'

    # FIXME Hook up io explicitly
    Alienist::Dumper::RubyJSONDumper.dump(snapshot)
  end
end
